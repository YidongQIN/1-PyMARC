@startuml Builder Pattern Illustration

skinparam shadowing false
' skinparam monochrome true
Title 建造者模式 Builder Pattern

class Director{
    builder: Builder
    construct():
    \tbuilder.buildPartA()
    \tbuilder.buildPartB()
    \tbuilder.buildPartC()
    \treturn builder.getResult()
}

note left of Director
  construct()依照一定次序调用buildPartX()，
  即encapsulate封装了Part的组建顺序，
  实现了用户与具体创建过程的隔离。

  不同情境下，用户采用了不同的 Director 即可获得不同的 Product。

  比如，修改construct()函数得到另一个Director，
  就生产没有PartB的一种Product：
  construct():
    builder.buildPartA()
    builder.buildPartC()
    return builder.getResult()

  有时候，Director 不需要实例化。
  即使实例化，因为传入的类是抽象的 Builder，
  也就意味着可以接收各种继承自 Builder 的 ConcreteBuilder。
end note

Director o-> Builder: command/guide/direct

abstract class Builder{
    pdt: Product //new 一个 Product() 作为属性
    buildPartA()
    buildPartB()
    buildPartC()
    getResult()
    isHook()
    ' //HookMethod钩子方法
}

note right of Builder
    Builder只是抽象 abstract 类，
    有时可以是接口类 Interface。

    所以，method 留空即可。

    等到 ConcreteBuilder 再实现、并override，
    用以实现 product 的复杂属性（各个部件）的生成。
end note

Builder <|-- ConcreteBuilder

note on link
    钩子方法的通常设置
    1. 在抽象Builder类中
        isHook(){return False}
    2. 在特定 ConcreteBuilder 中
        isHook(){return True}
        形成差异化。
    3. 在Director中调用判断，以决定某个builderPart是否运行
        if (! builder.isHook()):{
            builder.buildPartX()
        }
end note

class ConcreteBuilder{
    pdt: Product
    .. @override ..
    buildPartA()
    \tpdt.setterA() //调用Product的方法进行构造
    buildPartB()
    buildPartC()
    getResult()
    \treturn pdt //返回一个复杂的Product
    isHook()
}

note left of ConcreteBuilder
    根据情况，通过覆写父类/Interface 的方法，
    采用多种参数，
    实现多种 ConcreteBuilder 具体建造者。

    ConcreteBuilder 总是会绑定一个 Product，
    所以实际上调用了 Product 提供的 setter/getter 方法。
end note

note bottom of ConcreteBuilder
如何分辨/设计？
一定实例化的是 ConcreteBuilder。
Director 可能实例化。
Builder 是抽象类或接口，一定没有实例。
Product 是结果，是最后生成的。
end note

ConcreteBuilder - Product

class Product{
    partA
    partB
    partC
    setterA()
    getterA()
    setterB()
    getterB()
    setterC()
    getterC()
}

note bottom of Product
    Product有复杂的组件 A、B、C 组成，
    各个组件有不同的 setter/getter 方法
end note

legend
以“去电脑店装机”做个示意：
顾客 = Client
电脑店老板 = Director
电脑部件 = Builder
装机小哥A = ConcreteBuilderA
装机小哥B = ConcreteBuilderB
成品电脑 = Product

最终调用的 __main__:
di = new Director()
bd_a = new ConcreteBuilderA()
bd_b = new ConcreteBuilderB()
// 店里有老板和装机小哥A 和 B
di.construct(bd_a)
// 老板指挥装机小哥A
Product computer = bd_a.getResult()
// 装机小哥A把成品电脑拿出来
// 装机小哥B的组装可以和A不一样
endlegend

@enduml
